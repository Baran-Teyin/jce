/* eslint-disable dot-notation */
/* global jQuery, Joomla */
(function ($) {
    function parseUrl(url) {
        var data = {};

        if (!url) {
            return data;
        }

        url = url.substring(url.indexOf('?') + 1);

        $.each(url.replace(/\+/g, ' ').split('&'), function (i, value) {
            var param = value.split('='), key = decodeURIComponent(param[0]), val;

            if (param.length === 2) {
                val = decodeURIComponent(param[1]);

                if (typeof val === 'string' && val.length) {
                    data[key] = val;
                }
            }
        });

        return data;
    }
    
    function isAdmin(value) {
        return value && value.indexOf('/administrator/') != -1;
    }

    function getBasePath(elm) {
        // Joomla 3.5.x / 4.x Media Field
        var path = '', $wrapper = $(elm).parents('.field-media-wrapper'), inst = $wrapper.data('fieldMedia') || $wrapper.get(0);

        if (inst) {
            // Joomla 3
            if (inst.options) {
                path = inst.options.basepath || '';
                // Joomla 4
            } else {
                path = inst.basePath || '';
            }
        }

        // get from input for some layout overrides
        path = path || $(elm).data('basepath') || '';

        // resolve path for admin
        if (path && !isAdmin(path) && isAdmin(document.location.href)) {
            path += 'administrator/';
        }

        return path;
    }

    function updateMediaUrl(row, options) {
        $(row).find('.field-media-wrapper').add(row).each(function () {
            var $inp = $(this).find('.field-media-input'), id = $inp.attr('id');

            if ($inp.attr('disabled')) {
                return true;
            }

            if (!id) {
                return true;
            }

            // update field id with index
            id = id.replace('rowX', 'row' + $(row).index());

            $(this).addClass('wf-media-wrapper');

            // get url from data attribute or custom element attribute
            var dataUrl = $(this).data('url') || $(this).attr('url') || '';

            // legacy modal link btn
            var $linkBtn = $(this).find('a[href*="index.php?option=com_media"].modal.btn');

            if ($linkBtn.length && !dataUrl) {
                dataUrl = $linkBtn.attr('href') || '';
            }

            // parse url parameters
            var params = parseUrl(dataUrl);

            // set mediatype default to "images"
            var mediatype = 'images';

            // set plugin (may contain caller), defaults to browser
            var plugin = params.plugin ? params.plugin : 'browser';

            // process a parameter
            if (params.mediatype) {
                mediatype = params.mediatype;
                // or layout override of url set to files
            } else if (params.view == 'files') {
                mediatype = 'files';
            }

            // get supported extensions from converted mediafield
            if ($inp.hasClass('wf-media-input-converted')) {
                try {
                    supportedExtensions = JSON.parse($(row).attr('supported-extensions') || '{}');
                } catch (e) {
                    supportedExtensions = false;
                }

                if (supportedExtensions) {
                    var extensions = [];

                    $.each(supportedExtensions, function (key, values) {
                        if (Array.isArray(values) && values.length) {
                            extensions = extensions.concat(values);
                        }
                    });

                    if (extensions.length) {
                        mediatype = extensions.join(',');
                    }
                }
            }

            // create url
            var url = getBasePath($inp) + 'index.php?option=com_jce&task=plugin.display&plugin=' + plugin + '&fieldid=' + id + '&mediatype=' + mediatype;

            if (options.context) {
                params.context = options.context;
            }

            var invalidParams = ['option', 'task', 'plugin', 'fieldid', 'mediatype', 'element', 'view', 'tmpl'];

            $.each(invalidParams, function (i, key) {
                delete params[key];
            });

            url += '&' + $.param(params);

            // update data url attribute
            if ($(this).data('url')) {
                $(this).data('url', url);
            }

            // update custom element
            if ($(this).is('joomla-field-media, .wf-media-wrapper-custom')) {
                $(this).attr('url', url);

                // create new iframe
                var ifrHtml = Joomla.sanitizeHtml('<iframe src="' + url + '" class="iframe" title="" width="100%" height="100%"></iframe>', { iframe: ['src', 'class', 'title', 'width', 'height'] });

                // update attributes
                $(this).find('.joomla-modal').attr('data-url', url).attr('data-iframe', ifrHtml);
            }

            // update link button
            if ($linkBtn.length) {
                $linkBtn.attr('href', url);
            }
        });
    }

    function cleanInputValue(elm) {
        var val = $(elm).val() || '';

        // clean value first
        if (val.indexOf('#joomlaImage') != -1) {
            val = val.substring(0, val.indexOf('#'));
            $(elm).val(val).attr('value', val);
        }
    }
    
    $(document).ready(function ($) {
        var options = Joomla.getOptions('plg_system_jce', {});

        function canProcessField(elm) {
            return $(elm).find('.wf-media-input-active').length;
        }

        function disableCustomElementButtons(elm) {
            if (elm.button && elm.button.hasAttribute('disabled')) {
                elm.button.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }, true);
            }
            
            if (elm.buttonClearEl && elm.buttonClearEl.hasAttribute('disabled')) {
                elm.buttonClearEl.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }, true);
            }
        }
        
        // process media input wrapper
        $('.wf-media-input').parents('.field-media-wrapper, .fc-field-value-properties-box').addClass('wf-media-wrapper');

        // remove readonly attribute on active media inputs
        $('.wf-media-input-active').removeAttr('readonly');

        // remove modal heading
        $('.wf-media-wrapper .modal-header h3').html('&nbsp;');

        $('.wf-media-wrapper').find('button.button-select').on('click', function (e) {
            e.preventDefault();
        });

        // disable media input and prevent button click
        $('.wf-media-input').not('.wf-media-input-active').prop('disabled', true).parent().find('button, a.btn').prop('disabled', true).on('click', function (e) {
            e.preventDefault();
            e.stopImmediatePropagation();
        }).removeAttr('onclick').hide();

        // update existing repeatable
        $('.wf-media-input').parents('.subform-repeatable-group').each(function (i, row) {
            if (!canProcessField(row)) {
                $(row).parents('joomla-field-subform').find('button').hide().prop('disabled', true).on('click', function (e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                });
            }
        });

        // repeatable when created
        $(document).on('subform-row-add', function (evt, row) {
            // get original event from jQuery
            var originalEvent = evt.originalEvent;

            // check for detail object, should contain the row
            if (originalEvent && originalEvent.detail) {
                row = originalEvent.detail.row || row;
            }

            if (canProcessField(row)) {
                $(row).find('.wf-media-input').each(function () {
                    $(this).parents('joomla-field-media').addClass('wf-media-wrapper');

                    if ($(this).hasClass('wf-media-input-active')) {
                        $(this).removeAttr('readonly');
                    } else {
                        $(this).prop('disabled', true);
                    }
                });

                // update joomla-field-media elements
                $(row).filter('joomla-field-media').trigger('joomla-field-media:update');

                updateMediaUrl(row, options, true);
            } else {
                $(row).find('.wf-media-input').each(function () {
                    $(this).prop('disabled', true).parents('joomla-field-media').addClass('wf-media-wrapper'); // trigger css selector
                });

                $(row).find('joomla-field-media').each(function () {
                    $(this).find('button').hide().prop('disabled', true);
                    disableCustomElementButtons(this);
                });

                $(row).parents('joomla-field-subform').find('button').hide().prop('disabled', true).on('click', function (e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                });
            }
        });

        // disable button actions (Joomla 4 and Joomla 5)
        $('joomla-field-media.wf-media-wrapper').each(function () {
            disableCustomElementButtons(this);
        });

        // joomla custom attribute and media field override
        $('joomla-field-media.wf-media-wrapper').on('joomla-field-media:update', function (e) {
            // eslint-disable-next-line consistent-this
            var field = this;

            if (field.inputElement) {
                // clean value before processing
                cleanInputValue(field.inputElement);

                // copy markValid function or noop
                var markValidFunction = field.markValid || function () { };

                // override markValid and treat as a callback to clean the input value
                field.markValid = function () {
                    cleanInputValue(this.inputElement);

                    // markValid (check for label)
                    if (field.querySelector('label[for="' + this.inputElement.id + '"]')) {
                        markValidFunction.apply(this);
                    }
                };

                // prevent validation and update of field value
                field.inputElement.addEventListener('change', function (e) {
                    e.stopImmediatePropagation();

                    cleanInputValue(this);

                    // markValid (check for label) and...
                    if (field.querySelector('label[for="' + this.id + '"]')) {
                        markValidFunction.apply(this);
                    }

                    fetch(field.basePath + this.value).then(function (response) {
                        return response.blob();
                    }).then(function (blob) {
                        field.mimeType = blob.type;
                        // updatePreview
                        field.updatePreview();
                    });

                    // trigger update for t4 builder
                    $(document).trigger('t4:media-selected', { selectedUrl: field.basePath + this.value });

                    // external jquery event
                    $(this).trigger('change');
                }, true);
            }

        }).trigger('joomla-field-media:update').each(function () {
            updateMediaUrl(this, options, true);
        });

        // nasty fix for Joomla 5.1 media dialog
        $(document).on('joomla-dialog:open', function (e) {
            var target = e.target;

            if($(target).hasClass('joomla-dialog-media-field')) {
                var ifr = target.querySelector('iframe');

                if (ifr && ifr.src.indexOf('index.php?option=com_jce') != -1) {
                    $(target).addClass('wf-media-dialog');
                }
            }
        });
    });
})(jQuery);